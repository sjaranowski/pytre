#!/usr/bin/python
# -*- coding: utf-8 -*-

class Error(Exception):
  """Base class for exceptions in module."""
  pass

class TrnFileInformationMissingError(Error):
  """Exception raised when a '*.trn' file seems to be invalid, i.e. some
  needed information is not found inside this file

  Attributes:
      what     -- what information is missing
      filename -- the name of damaged file
  """

  def __init__(self, what, filename):
    self.what = what
    self.filename = filename

class NoTrnFilesError(Error):
  """ Exception raised, when there are no correct '*.trn' files in the
  input arguments.

  Attributes
      msg -- explanation
  """

  def __init__(self, msg):
    self.msg = msg

import sys

# print '* STARTING IN VERBOSE MODE'

# print '* Passed arguments:', sys.argv[1:]
num_files = 0

# print '* Extracting data from files...'
results = {}
for fname in sys.argv[1:]:
  try:
    with open(fname, 'r') as f:
      num_procs = -1
      walltime = -1
      # print '** Opened file:', fname
      for line in f.readlines():
        if line.find('Performance Timer') != -1:
          num_procs = int ( line.split()[6] )
          # print '*** Read # of processors:', num_procs
          if ( not results.has_key(num_procs) ):
            results[num_procs] = [[], {}, -1.0]
        if line.find('Total Solve Wall Time') != -1:
          walltime = float(line.split()[5])
          # print '*** Read walltime:', walltime
      # Throw some exceptions in case you didn't find the data
      if num_procs == -1:
        raise TrnFileInformationMissingError("number of processors", fname)
      elif walltime == -1:
        raise TrnFileInformationMissingError("Total Solve Walltime", fname)
      else:
        num_files = num_files + 1
        if ( not results.has_key(num_procs) ):
          results[num_procs] = [[], {}, -1.0]
        results[num_procs][0].append((walltime, fname))
  except IOError as (errno, strerror):
    print "ERROR: I/O error({0}): {1}".format(errno, strerror)
    print "ERROR: Could not open file: '{0}'".format(fname)
  except ValueError:
    print("WARNING: Could not convert data")
    print("WARNING: HINT: probably wrong number format inside file")
  except TrnFileInformationMissingError as errinfo:
    print("WARNING: Could not find"),
    print errinfo.what,
    print("inside file '{0}'").format(errinfo.filename)
    print("WARNING: Omitting file '{0}'").format(errinfo.filename)
    print("WARNING: HINT: Sure a '*.trn' file?")
  except:
    print "ERROR: Unexpected error:", sys.exc_info()[0]
    raise

# See if there were some correct '*.trn' files
try:
  if num_files == 0:
    raise NoTrnFilesError("You must provide some correct '*.trn' files")
except NoTrnFilesError as errnofiles:
  print("ERROR: {0}").format(errnofiles.msg)
  print("ERROR: No files = nothing to do. Exiting")
  exit(1)

# print '* Counting statistics...'
from operator import itemgetter

avg = lambda x: sum(x) / float(len(x))

for val in results.itervalues():
  walltimes = zip(*val[0])[0]
  vavg = sum(walltimes) / float(len(val[0]))

  csrs = map(lambda x: 8.64e4 / x, walltimes)
  cavg = sum(csrs) / float(len(val[0]))
  #print cavg, csrs, val[0]

  val[1]['min_wt'] = min(val[0], key = itemgetter(0))
  val[1]['max_wt'] = max(val[0], key = itemgetter(0))
  val[1]['avg_wt'] = vavg

  # NOTE: 86400 seconds = 24 hours.
  val[1]['min_csr'] = (8.64e4 / val[1]['max_wt'][0], val[1]['max_wt'][1])
  val[1]['max_csr'] = (8.64e4 / val[1]['min_wt'][0], val[1]['min_wt'][1])
  val[1]['avg_csr'] =  8.64e4 / vavg

  # Count some more statistics.
  cen_one = map(lambda x : abs(x - vavg), walltimes)
  cen_two = map(lambda x : x*x, cen_one )
  std_dev = avg ( cen_two ) ** 0.5

  val[1]['mxe_wt'] = max ( cen_one )
  val[1]['mom_wt'] = avg ( cen_one )
  val[1]['var_wt'] = avg ( cen_two )
  val[1]['dev_wt'] = std_dev

  ymey   = map(lambda y : abs(y - cavg), csrs)
  ymeysq = map(lambda y : y*y, ymey )
  std    = avg(ymeysq) ** 0.5

  val[1]['mxe_csr'] = max(ymey)
  val[1]['mom_csr'] = avg(ymey)
  val[1]['var_csr'] = avg(ymeysq)
  val[1]['std_csr'] = val[1]['var_csr'] ** 0.5

# print '** Sorting the data...'
base_proc = float(min(results.keys()))
base_csr = results[base_proc][1]['max_csr'][0]

for key, val in results.iteritems():
  val[2] = base_csr * key / base_proc

# print '* Printing output...'

#  <number of cores>
#  <number of repeats>
#  <scaled CSR (perfect speedup)>
#  <maximum CSR (best rate through all of the experiments)>
#  <maximum absolute deviation (of CSR)>
#  <naive standard deviation (of CSR)>
#  <minimum walltime (can be counted from maximum CSR)>
#  <file that hit the best result>

for key, val in results.iteritems():
  print '{0:5d}\t{1:3d}\t{2:10.3f}\t{3:10.3f}\t{4:8.3f}\t{5:8.3f}\t{6:10.3f}\t{7}'.format(key, len(val[0]), val[2], val[1]['max_csr'][0], val[1]['mxe_csr'], val[1]['std_csr'], val[1]['min_wt'][0], val[1]['max_csr'][1])

# print '* FINISHED'
